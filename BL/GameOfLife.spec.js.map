{"version":3,"sources":["BL/GameOfLife.spec.ts"],"names":[],"mappings":"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","file":"GameOfLife.spec.js","sourcesContent":["import 'mocha';\r\nimport { expect } from 'chai';\r\nimport { Cell, Board } from '../Model';\r\nimport { GameOfLife } from './';\r\n\r\ndescribe('GameOfLife', () => {\r\n    describe('constructor', () => {\r\n        it('should initialize seed correctly', () => {\r\n            let matrix =\r\n                [[false, true, false],\r\n                [true, true, false],\r\n                [false, false, false]];\r\n\r\n            let expectedBoard = new Board(matrix);\r\n\r\n            let game = new GameOfLife(expectedBoard);\r\n            let actualBoard = game.GetCurrentState();\r\n\r\n            expect(actualBoard).to.be.deep.equal(expectedBoard);\r\n        });\r\n    });\r\n\r\n    describe('ComputeNextState', () => {\r\n\r\n        let computeNextStateBaseCheck = function (matrix: boolean[][], expected: boolean) {\r\n            let expectedBoard = new Board(matrix);\r\n\r\n            let game = new GameOfLife(expectedBoard);\r\n            let nextBoard = game.ComputeNextState();\r\n\r\n            let cell = new Cell(1, 1);\r\n            let currentState = nextBoard.GetCurrentCellState(cell);\r\n\r\n            expect(currentState).to.be.deep.equal(expected);\r\n        }\r\n\r\n        describe('Living cell', () => {\r\n            it('with 0 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[false, false, false],\r\n                    [false, true, false],\r\n                    [false, false, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n            \r\n            it('with 1 living neighbor - should die', () => {\r\n                let matrix =\r\n                    [[false, false, false],\r\n                    [true, true, false],\r\n                    [false, false, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 2 living neighbors - should live', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [false, true, false],\r\n                    [false, false, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, true);\r\n            });\r\n\r\n            it('with 3 living neighbors - should live', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [true, true, false],\r\n                    [false, false, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, true);\r\n            });\r\n\r\n            it('with 4 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [true, true, false],\r\n                    [true, false, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 5 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [true, true, false],\r\n                    [true, true, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 6 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [true, true, false],\r\n                    [true, true, true]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 7 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [true, true, true],\r\n                    [true, true, true]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 8 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, true],\r\n                    [true, true, true],\r\n                    [true, true, true]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n        });\r\n\r\n        describe('Dead cell', () => {\r\n            it('with 0 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[false, false, false],\r\n                    [false, false, false],\r\n                    [false, false, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 1 living neighbor - should die', () => {\r\n                let matrix =\r\n                    [[false, false, false],\r\n                    [true, false, false],\r\n                    [false, false, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 2 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [false, false, false],\r\n                    [false, false, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 3 living neighbors - should live', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [true, false, false],\r\n                    [false, false, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, true);\r\n            });\r\n\r\n            it('with 4 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [true, false, false],\r\n                    [true, false, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 5 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [true, false, false],\r\n                    [true, true, false]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 6 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [true, false, false],\r\n                    [true, true, true]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 7 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, false],\r\n                    [true, false, true],\r\n                    [true, true, true]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n\r\n            it('with 8 living neighbors - should die', () => {\r\n                let matrix =\r\n                    [[true, true, true],\r\n                    [true, false, true],\r\n                    [true, true, true]];\r\n\r\n                computeNextStateBaseCheck(matrix, false);\r\n            });\r\n        });\r\n    });\r\n});\r\n"]}