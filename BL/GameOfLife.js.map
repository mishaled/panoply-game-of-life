{"version":3,"sources":["BL/GameOfLife.ts"],"names":[],"mappings":";;AAEA,+BAAiC;AAEjC;IAGI,oBAAmB,IAAW;QAC1B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IAEM,wBAAG,GAAV;QACI,OAAO,IAAI,EAAE;YACT,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAChD;IACL,CAAC;IAEM,oCAAe,GAAtB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAEM,qCAAgB,GAAvB;QAAA,iBAUC;QATG,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;QAC7C,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAErD,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,UAAC,IAAI;YACvB,IAAI,aAAa,GAAG,KAAI,CAAC,iCAAiC,CAAC,IAAI,EAAE,KAAI,CAAC,aAAa,CAAC,CAAC;YACrF,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,OAAO,SAAS,CAAC;IACrB,CAAC;IAEO,sDAAiC,GAAzC,UAA0C,IAAU,EAAE,YAAmB;QACrE,IAAI,iBAAiB,GAAG,YAAY,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC;QACtE,IAAI,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC;QAElC,IAAI,gBAAgB,EAAE;YAClB,OAAO,IAAI,CAAC,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;SAC7D;QAED,OAAO,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;IAC5D,CAAC;IAEO,+CAA0B,GAAlC,UAAmC,iBAAyB;QACxD,IAAI,iBAAiB,GAAG,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,iBAAiB,IAAI,CAAC,IAAI,iBAAiB,IAAI,CAAC,EAAE;YAClD,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,6CAAwB,GAAhC,UAAiC,iBAAyB;QACtD,IAAI,iBAAiB,IAAI,CAAC,EAAE;YACxB,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IACL,iBAAC;AAAD,CA3DA,AA2DC,IAAA;AA3DY,gCAAU","file":"GameOfLife.js","sourcesContent":["import { Cell, Board } from '../Model';\r\nimport { IGameOfLife } from './IGameOfLife';\r\nimport * as lodash from 'lodash';\r\n\r\nexport class GameOfLife implements IGameOfLife {\r\n    private _currentState: Board;\r\n\r\n    public constructor(seed: Board) {\r\n        this._currentState = seed;\r\n    }\r\n\r\n    public Run() {\r\n        while (true) {\r\n            this._currentState = this.ComputeNextState();\r\n        }\r\n    }\r\n    \r\n    public GetCurrentState(): Board {\r\n        return this._currentState;\r\n    }\r\n\r\n    public ComputeNextState(): Board {\r\n        let cells = this._currentState.GetAllCells();\r\n        let nextState = lodash.cloneDeep(this._currentState);\r\n\r\n        lodash.forEach(cells, (cell) => {\r\n            let cellNextState = this.ShouldTheCellBeAliveInTheNextStep(cell, this._currentState);\r\n            nextState.SetCell(cell, cellNextState);\r\n        });\r\n\r\n        return nextState;\r\n    }\r\n\r\n    private ShouldTheCellBeAliveInTheNextStep(cell: Cell, currentState: Board): boolean {\r\n        let numberOfNeighbors = currentState.GetNumberOfLivingNeighbors(cell);\r\n        let currentCellState = cell.state;\r\n\r\n        if (currentCellState) {\r\n            return this.ComputeLivingCellNextState(numberOfNeighbors);\r\n        }\r\n\r\n        return this.ComputeDeadCellNextState(numberOfNeighbors);\r\n    }\r\n\r\n    private ComputeLivingCellNextState(numberOfNeighbors: number): boolean {\r\n        if (numberOfNeighbors < 2) {\r\n            return false;\r\n        }\r\n\r\n        if (numberOfNeighbors == 2 || numberOfNeighbors == 3) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private ComputeDeadCellNextState(numberOfNeighbors: number): boolean {\r\n        if (numberOfNeighbors == 3) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}"]}