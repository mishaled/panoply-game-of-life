{"version":3,"sources":["Model/Board.ts"],"names":[],"mappings":";;AAAA;IAKI,eAAmB,MAAmB;QAClC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC;QAEhC,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE;YACrB,MAAM,kCAAkC,CAAC;SAC5C;QAED,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAEtC,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE;YACxB,MAAM,qCAAqC,CAAC;SAC/C;QAED,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAEM,0CAA0B,GAAjC,UAAkC,OAAe,EAAE,UAAkB;QACjE,IAAI,uBAAuB,GAAG,CAAC,CAAC;QAEhC,IAAI,OAAO,IAAI,IAAI,CAAC,UAAU,IAAI,UAAU,IAAI,IAAI,CAAC,aAAa,EAAE;YAChE,MAAM,eAAe,CAAC;SACzB;QAED,KAAK,IAAI,CAAC,GAAG,OAAO,GAAG,CAAC,EAAE,CAAC,IAAI,OAAO,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC7C,KAAK,IAAI,CAAC,GAAG,UAAU,GAAG,CAAC,EAAE,CAAC,IAAI,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACnD,IAAI,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,EAAE,UAAU,CAAC,EAAE;oBACvE,SAAS;iBACZ;gBAED,uBAAuB,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACzD;SACJ;QAED,OAAO,uBAAuB,CAAC;IACnC,CAAC;IAEO,oDAAoC,GAA5C,UAA6C,CAAS,EAAE,CAAS,EAAE,OAAe,EAAE,UAAkB;QAClG,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;YAC3B,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;IAEvD,CAAC;IAEO,6BAAa,GAArB,UAAsB,CAAS,EAAE,CAAS,EAAE,OAAe,EAAE,UAAkB;QAC3E,OAAO,OAAO,IAAI,CAAC;YACf,UAAU,IAAI,CAAC,CAAC;IACxB,CAAC;IAEO,6BAAa,GAArB,UAAsB,OAAe,EAAE,UAAkB;QACrD,OAAO,OAAO,IAAI,CAAC;YACf,UAAU,IAAI,CAAC;YACf,OAAO,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC;YAC9B,UAAU,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;IAC7C,CAAC;IACL,YAAC;AAAD,CA1DA,AA0DC,IAAA;AA1DY,sBAAK","file":"Board.js","sourcesContent":["export class Board {\r\n    private _matrix: boolean[][];\r\n    private _rowsCount: number;\r\n    private _columnsCount: number;\r\n\r\n    public constructor(matrix: boolean[][]) {\r\n        this._rowsCount = matrix.length;\r\n\r\n        if (this._rowsCount < 2) {\r\n            throw \"Board does not have enough rows!\";\r\n        }\r\n\r\n        this._columnsCount = matrix[0].length;\r\n\r\n        if (this._columnsCount < 2) {\r\n            throw \"Board does not have enough columns!\";\r\n        }\r\n\r\n        this._matrix = matrix;\r\n    }\r\n\r\n    public GetNumberOfLivingNeighbors(cellRow: number, cellColumn: number): number {\r\n        let numberOfLivingNeighbors = 0;\r\n\r\n        if (cellRow >= this._rowsCount || cellColumn >= this._columnsCount) {\r\n            throw \"No such cell!\";\r\n        }\r\n\r\n        for (let i = cellRow - 1; i <= cellRow + 1; i++) {\r\n            for (let j = cellColumn - 1; j <= cellColumn + 1; j++) {\r\n                if (!this.DoesNeighborExistAndNotTheCellItself(i, j, cellRow, cellColumn)) {\r\n                    continue;\r\n                }\r\n\r\n                numberOfLivingNeighbors += Number(this._matrix[i][j]);\r\n            }\r\n        }\r\n\r\n        return numberOfLivingNeighbors;\r\n    }\r\n\r\n    private DoesNeighborExistAndNotTheCellItself(i: number, j: number, cellRow: number, cellColumn: number): boolean {\r\n        return this.DoesCellExist(i, j) &&\r\n            !this.IsTheSameCell(i, j, cellRow, cellColumn);\r\n\r\n    }\r\n\r\n    private IsTheSameCell(i: number, j: number, cellRow: number, cellColumn: number): boolean {\r\n        return cellRow == i &&\r\n            cellColumn == j;\r\n    }\r\n\r\n    private DoesCellExist(cellRow: number, cellColumn: number): boolean {\r\n        return cellRow >= 0 &&\r\n            cellColumn >= 0 &&\r\n            cellRow <= this._rowsCount - 1 &&\r\n            cellColumn <= this._columnsCount - 1;\r\n    }\r\n}"]}