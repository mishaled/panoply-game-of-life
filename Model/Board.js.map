{"version":3,"sources":["Model/Board.ts"],"names":[],"mappings":"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","file":"Board.js","sourcesContent":["import { Cell } from './';\r\n\r\nexport class Board {\r\n    private _matrix: boolean[][];\r\n    private _rowsCount: number;\r\n    private _columnsCount: number;\r\n\r\n    public constructor(matrix: boolean[][]) {\r\n        this._rowsCount = matrix.length;\r\n\r\n        if (this._rowsCount < 2) {\r\n            throw \"Board does not have enough rows!\";\r\n        }\r\n\r\n        this._columnsCount = matrix[0].length;\r\n\r\n        if (this._columnsCount < 2) {\r\n            throw \"Board does not have enough columns!\";\r\n        }\r\n\r\n        this._matrix = matrix;\r\n    }\r\n\r\n    public GetNumberOfLivingNeighbors(cell: Cell): number {\r\n        let numberOfLivingNeighbors = 0;\r\n\r\n        if (cell.i >= this._rowsCount || cell.j >= this._columnsCount) {\r\n            throw \"No such cell!\";\r\n        }\r\n\r\n        for (let i = cell.i - 1; i <= cell.i + 1; i++) {\r\n            for (let j = cell.j - 1; j <= cell.j + 1; j++) {\r\n                let neightbor = new Cell(i, j);\r\n                if (!this.DoesNeighborExistAndNotTheCellItself(neightbor, cell)) {\r\n                    continue;\r\n                }\r\n\r\n                numberOfLivingNeighbors += Number(this._matrix[i][j]);\r\n            }\r\n        }\r\n\r\n        return numberOfLivingNeighbors;\r\n    }\r\n\r\n    public GetCurrentCellState(cell: Cell): boolean {\r\n        if (!this.DoesCellExist(cell)) {\r\n            throw 'Cell does not exist!';\r\n        }\r\n\r\n        return this._matrix[cell.i][cell.j];\r\n    }\r\n\r\n    public SetCell(cell: Cell, newState: boolean) {\r\n        if (!this.DoesCellExist(cell)) {\r\n            throw 'Cell does not exist!';\r\n        }\r\n\r\n        this._matrix[cell.i][cell.j] = newState;\r\n    }\r\n\r\n    public GetAllCells() {\r\n        let cells: Cell[] = [];\r\n\r\n        for (let i = 0; i < this._rowsCount; i++) {\r\n            for (let j = 0; j < this._columnsCount; j++) {\r\n                let currentCell = new Cell(i, j, this._matrix[i][j]);\r\n                cells.push(currentCell);\r\n            }\r\n        }\r\n\r\n        return cells;\r\n    }\r\n\r\n    private DoesNeighborExistAndNotTheCellItself(neighbor: Cell, cell: Cell): boolean {\r\n        return this.DoesCellExist(neighbor) &&\r\n            !this.IsTheSameCell(neighbor, cell);\r\n\r\n    }\r\n\r\n    private IsTheSameCell(cell1: Cell, cell2: Cell): boolean {\r\n        return cell1.i == cell2.i &&\r\n            cell1.j == cell2.j;\r\n    }\r\n\r\n    private DoesCellExist(cell: Cell): boolean {\r\n        return cell.i >= 0 &&\r\n            cell.j >= 0 &&\r\n            cell.i <= this._rowsCount - 1 &&\r\n            cell.j <= this._columnsCount - 1;\r\n    }\r\n}"]}