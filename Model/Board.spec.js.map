{"version":3,"sources":["Model/Board.spec.ts"],"names":[],"mappings":"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","file":"Board.spec.js","sourcesContent":["import 'mocha';\r\nimport { expect } from 'chai';\r\nimport { Cell, Board } from './';\r\n\r\ndescribe('Board', () => {\r\n    describe('constructor', () => {\r\n        it('not enough rows - should throw error', () => {\r\n            let matrix = [[false, false]];\r\n            let constructorFunction = function () { new Board(matrix); };\r\n\r\n            expect(constructorFunction).to.throw('Board does not have enough rows!');\r\n        });\r\n\r\n        it('not enough columns - should throw error', () => {\r\n            let matrix = [[false], [false]];\r\n            let constructorFunction = function () { new Board(matrix); };\r\n\r\n            expect(constructorFunction).to.throw('Board does not have enough columns!');\r\n        });\r\n\r\n        it('good dimensions - should not throw exception', () => {\r\n            let matrix =\r\n                [[false, false],\r\n                [false, false]];\r\n\r\n            new Board(matrix);\r\n        });\r\n    });\r\n\r\n    describe('GetNumberOfLivingNeighbors', () => {\r\n        it('cell in top left corner - should return correct number', () => {\r\n            let matrix =\r\n                [[false, true, false],\r\n                [true, true, false],\r\n                [false, false, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(0, 0);\r\n            let actualNumber = board.GetNumberOfLivingNeighbors(cell);\r\n            let expectedNumber = 3;\r\n\r\n            expect(actualNumber).to.be.equal(expectedNumber);\r\n        });\r\n\r\n        it('cell in top right corner - should return correct number', () => {\r\n            let matrix =\r\n                [[false, true, false],\r\n                [false, true, true],\r\n                [false, false, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(0, 2);\r\n            let actualNumber = board.GetNumberOfLivingNeighbors(cell);\r\n            let expectedNumber = 3;\r\n\r\n            expect(actualNumber).to.be.equal(expectedNumber);\r\n        });\r\n\r\n        it('cell in bottom left corner - should return correct number', () => {\r\n            let matrix =\r\n                [[false, false, false],\r\n                [true, true, false],\r\n                [false, true, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(2, 0);\r\n            let actualNumber = board.GetNumberOfLivingNeighbors(cell);\r\n            let expectedNumber = 3;\r\n\r\n            expect(actualNumber).to.be.equal(expectedNumber);\r\n        });\r\n\r\n        it('cell in bottom right corner - should return correct number', () => {\r\n            let matrix =\r\n                [[false, false, false],\r\n                [false, true, true],\r\n                [false, true, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(2, 2);\r\n            let actualNumber = board.GetNumberOfLivingNeighbors(cell);\r\n            let expectedNumber = 3;\r\n\r\n            expect(actualNumber).to.be.equal(expectedNumber);\r\n        });\r\n\r\n        it('cell in middle - should return correct number', () => {\r\n            let matrix =\r\n                [[true, true, true],\r\n                [true, false, true],\r\n                [true, true, true]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(1, 1);\r\n            let actualNumber = board.GetNumberOfLivingNeighbors(cell);\r\n            let expectedNumber = 8;\r\n\r\n            expect(actualNumber).to.be.equal(expectedNumber);\r\n        });\r\n\r\n        it('the cell itself should not be included', () => {\r\n            let matrix =\r\n                [[true, true, true],\r\n                [true, true, true],\r\n                [true, true, true]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(1, 1);\r\n            let actualNumber = board.GetNumberOfLivingNeighbors(cell);\r\n            let expectedNumber = 8;\r\n\r\n            expect(actualNumber).to.be.equal(expectedNumber);\r\n        });\r\n\r\n        it('cell on top in the middle- should return correct number', () => {\r\n            let matrix =\r\n                [[true, false, true],\r\n                [true, true, true],\r\n                [false, false, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(0, 1);\r\n            let actualNumber = board.GetNumberOfLivingNeighbors(cell);\r\n            let expectedNumber = 5;\r\n\r\n            expect(actualNumber).to.be.equal(expectedNumber);\r\n        });\r\n\r\n        it('cell in left in the middle- should return correct number', () => {\r\n            let matrix =\r\n                [[true, true, false],\r\n                [false, true, false],\r\n                [true, true, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(1, 0);\r\n            let actualNumber = board.GetNumberOfLivingNeighbors(cell);\r\n            let expectedNumber = 5;\r\n\r\n            expect(actualNumber).to.be.equal(expectedNumber);\r\n        });\r\n\r\n        it('cell in right in the middle- should return correct number', () => {\r\n            let matrix =\r\n                [[false, true, true],\r\n                [false, true, false],\r\n                [false, true, true]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(1, 2);\r\n            let actualNumber = board.GetNumberOfLivingNeighbors(cell);\r\n            let expectedNumber = 5;\r\n\r\n            expect(actualNumber).to.be.equal(expectedNumber);\r\n        });\r\n\r\n        it('cell on the bottom in the middle- should return correct number', () => {\r\n            let matrix =\r\n                [[false, false, false],\r\n                [true, true, true],\r\n                [true, false, true]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(2, 1);\r\n            let actualNumber = board.GetNumberOfLivingNeighbors(cell);\r\n            let expectedNumber = 5;\r\n\r\n            expect(actualNumber).to.be.equal(expectedNumber);\r\n        });\r\n    });\r\n\r\n    describe('SetCell', () => {\r\n        it('cell does not exist - should throw exception', () => {\r\n            let matrix =\r\n                [[false, true, false],\r\n                [true, true, false],\r\n                [false, false, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(-1, -1);\r\n            let cellExistsFunction = function () { board.SetCell(cell, false) };\r\n\r\n            expect(cellExistsFunction).to.throw('Cell does not exist!');\r\n        });\r\n\r\n        it('set to true - should return true', () => {\r\n            let matrix =\r\n                [[false, true, false],\r\n                [true, true, false],\r\n                [false, false, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(0, 0);\r\n            let expectedState = true;\r\n            board.SetCell(cell, expectedState);\r\n            let actualState = board.GetCurrentCellState(cell);\r\n\r\n            expect(actualState).to.be.equal(expectedState);\r\n        });\r\n\r\n        it('set to false - should return false', () => {\r\n            let matrix =\r\n                [[false, true, false],\r\n                [true, true, false],\r\n                [false, false, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(1, 0);\r\n            let expectedState = false;\r\n            board.SetCell(cell, expectedState);\r\n            let actualState = board.GetCurrentCellState(cell);\r\n\r\n            expect(actualState).to.be.equal(expectedState);\r\n        });\r\n    });\r\n\r\n    describe('GetCurrentCellState', () => {\r\n        it('cell does not exist - should throw exception', () => {\r\n            let matrix =\r\n                [[false, true, false],\r\n                [true, true, false],\r\n                [false, false, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(-1, -1);\r\n            let cellExistsFunction = function () { board.GetCurrentCellState(cell) };\r\n\r\n            expect(cellExistsFunction).to.throw('Cell does not exist!');\r\n        });\r\n\r\n        it('cell is dead - should return false', () => {\r\n            let matrix =\r\n                [[false, true, false],\r\n                [true, true, false],\r\n                [false, false, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(0, 0);\r\n            let actualState = board.GetCurrentCellState(cell);\r\n            let expectedState = false;\r\n\r\n            expect(actualState).to.be.equal(expectedState);\r\n        });\r\n\r\n        it('cell is alive - should return true', () => {\r\n            let matrix =\r\n                [[false, true, false],\r\n                [true, true, false],\r\n                [false, false, false]];\r\n\r\n            let board = new Board(matrix);\r\n            let cell = new Cell(1, 0);\r\n            let actualState = board.GetCurrentCellState(cell);\r\n            let expectedState = true;\r\n\r\n            expect(actualState).to.be.equal(expectedState);\r\n        });\r\n    });\r\n});"]}